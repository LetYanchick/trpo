#!/usr/bin/expect -f
#
# This Expect script was generated by autoexpect on Sun Dec 15 13:30:45 2024
# Expect and autoexpect were both written by Don Libes, NIST.
#
# Note that autoexpect does not guarantee a working script.  It
# necessarily has to guess about certain things.  Two reasons a script
# might fail are:
#
# 1) timing - A surprising number of programs (rn, ksh, zsh, telnet,
# etc.) and devices discard or ignore keystrokes that arrive "too
# quickly" after prompts.  If you find your new script hanging up at
# one spot, try adding a short sleep just before the previous send.
# Setting "force_conservative" to 1 (see below) makes Expect do this
# automatically - pausing briefly before sending each character.  This
# pacifies every program I know of.  The -c flag makes the script do
# this in the first place.  The -C flag allows you to define a
# character to toggle this mode off and on.

set force_conservative 0  ;# set to 1 to force conservative mode even if
			  ;# script wasn't run conservatively originally
if {$force_conservative} {
	set send_slow {1 .1}
	proc send {ignore arg} {
		sleep .1
		exp_send -s -- $arg
	}
}

#
# 2) differing output - Some programs produce different output each time
# they run.  The "date" command is an obvious example.  Another is
# ftp, if it produces throughput statistics at the end of a file
# transfer.  If this causes a problem, delete these patterns or replace
# them with wildcards.  An alternative is to use the -p flag (for
# "prompt") which makes Expect only look for the last line of output
# (i.e., the prompt).  The -P flag allows you to define a character to
# toggle this mode off and on.
#
# Read the man page for more info.
#
# -Don


set timeout -1
spawn ./client2 127.0.0.1 8080 t
match_max 100000
expect -exact "Connected to #!/usr/bin/expect -f
#
# This Expect script was generated by autoexpect on Sun Dec 15 13:30:45 2024
# Expect and autoexpect were both written by Don Libes, NIST.
#
# Note that autoexpect does not guarantee a working script.  It
# necessarily has to guess about certain things.  Two reasons a script
# might fail are:
#
# 1) timing - A surprising number of programs (rn, ksh, zsh, telnet,
# etc.) and devices discard or ignore keystrokes that arrive "too
# quickly" after prompts.  If you find your new script hanging up at
# one spot, try adding a short sleep just before the previous send.
# Setting "force_conservative" to 1 (see below) makes Expect do this
# automatically - pausing briefly before sending each character.  This
# pacifies every program I know of.  The -c flag makes the script do
# this in the first place.  The -C flag allows you to define a
# character to toggle this mode off and on.

set force_conservative 0  ;# set to 1 to force conservative mode even if
			  ;# script wasn't run conservatively originally
if {$force_conservative} {
	set send_slow {1 .1}
	proc send {ignore arg} {
		sleep .1
		exp_send -s -- $arg
	}
}

#
# 2) differing output - Some programs produce different output each time
# they run.  The "date" command is an obvious example.  Another is
# ftp, if it produces throughput statistics at the end of a file
# transfer.  If this causes a problem, delete these patterns or replace
# them with wildcards.  An alternative is to use the -p flag (for
# "prompt") which makes Expect only look for the last line of output
# (i.e., the prompt).  The -P flag allows you to define a character to
# toggle this mode off and on.
#
# Read the man page for more info.
#
# -Don


set timeout 1
spawn ./client2 127.0.0.1 8080 t
match_max 100000
set count 0
expect -exact "Connected to the server!\r
Print the expression you want to calculate\r
>" { incr count }
send -- "500 * 2\r"
expect -exact "500 * 2\r
Result: 2000\r
Print the expression you want to calculate\r
>" { incr count }
send -- "-500 * (-3)\r"
expect -exact "-500 * (-3)\r
Result: 1500\r
Print the expression you want to calculate\r
>" { incr count }
send -- "100/0\r"
expect -exact "100/0\r
Result: Division by zero\r
Print the expression you want to calculate\r
>" { incr count }
send -- "100000-100000\r"
expect -exact "100000-100000\r
Result: 0\r
Print the expression you want to calculate\r
>" { incr count }
send -- "90-2*3\r"
expect -exact "90-2*3\r
Result: 84\r
Print the expression you want to calculate\r
>" { incr count }
send -- "(90-2)*3\r"
expect -exact "(90-2)*3\r
Result: 264\r
Print the expression you want to calculate\r
>" { incr count }
send -- "90*2/(-8)\r"
expect -exact "90*2/(-8)\r
Result: -22.500000\r
Print the expression you want to calculate\r
>" { incr count }
send -- "6/3+1\r"
expect -exact "6/3+1\r
Result: 3.000000\r
Print the expression you want to calculate\r
>" { incr count }
send -- "10000*(1-1)\r"
expect -exact "10000*(1-1)\r
Result: 0\r
Print the expression you want to calculate\r
>" { incr count }
send -- "-900-(-9)-(-2)\r"
expect -exact "-900-(-9)-(-2)\r
Result: -889\r
Print the expression you want to calculate\r
>" { incr count }
send -- "((-2)-(-2)-0)\r"
expect -exact "((-2)-(-2)-0)\r
Result: 0\r
Print the expression you want to calculate\r
>" { incr count }
send -- "((-2+2)-1)\r"
expect -exact "((-2+2)-1)\r
Result: -1\r
Print the expression you want to calculate\r
>" { incr count }
send -- "90 / (5*0)\r"
expect -exact "90 / (5*0)\r
Result: Division by zero\r
Print the expression you want to calculate\r
>" { incr count }
send -- "123456789/2\r"
expect -exact "123456789/2\r
Wrong input, try again <123456789/2>\r
>" { incr count }
send -- "90 * (90 * (-1)\r"
expect -exact "90 * (90 * (-1)\r
Wrong input, try again <90 * (90 * (-1)>\r
>" { incr count }
send -- "yana\r"
expect -exact "yana\r
Wrong input, try again <yana>\r
>" { incr count }
send -- "90ja\r"
expect -exact "90ja\r
Wrong input, try again <90ja>\r
>" { incr count }
send -- "00000000\r"
expect -exact "00000000\r
Wrong input, try again <00000000>\r
>" { incr count }
send -- "12\r"
expect -exact "12\r
Wrong input, try again <12>\r
>" { incr count }
send -- "\r"
expect -exact "\r
Wrong input, try again <>\r
>" { incr count }
send -- "12*(00)\r"
expect -exact "12*(00)\r
Wrong input, try again <12*(00)>\r
>" { incr count }
send -- "exit\r"
expect eof
if { $count != 22 } {
set wrongs [expr {22 - $count}]
puts "Unsuccess $wrongs tests are wrong"
} else {
puts "Success"
}
